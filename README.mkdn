Handlebars
==========

Server provisioning from [Trike](http://tricycledevelopments.com/)

Introduction
------------

Handlebars is a Ruby framework for automating the process of configuring Ubuntu Linux servers. It's implemented as domain specific language where tasks to be run are defined with checks to determine if they need to be run. Handlebars has taken inspiration from Chef and Puppet but aims to have a lower barrier to entry than them and be less opinionated than Deprec.

Handlebars allows recipes for one of more servers to be defined such that those servers will be fully configured without any interaction. Its also repeatable so an existing instance of a server can be updated. It was created to allow rapid, non-interactive configuration of server infrastructure on Amazon EC2.

Concepts
--------

Handlebars utilises the following concepts:

* Tool
** A tool is a set of functionality for managing a particular resource. Such as directories and files, crontab, Debian packages, Ruby gems, etc.
* Recipe
** A recipe uses the tools to achieve some goal state, such as an installed and configured Apache http server.
* Task
** A task is a reusable chunk of code generally bundled together for a single type application such as a Ruby on Rails application.
* Role
** A role utilises recipes and tools to setup the server for a specific application such as an instance of Wordpress running at blog.example.com.
* Server
** A server is an actual server that Handlebars will manage. A server defines the roles that it will perform.

Getting Started
---------------

The preferred way to use handlebars is as a Git submodule within a master Git repository that stores all of your server configuration:

    mkdir servers
    cd servers
    git init
    git submodule add git://github.com/tricycle/handlebars.git handlebars
    handlebars/handlebars.rb install

Now you're ready to start configuring a server.

Example/Demo/Tutorial
=====================

In this complete example we will setup a Wordpress installation with a MySQL database on an Amazon AWS EC2 instance. To follow along you will need an Amazon Web Services account.

You should have performed the steps above in Getting Started and be in to the "servers" directory.

Define the Server
-----------------

Create a servers.yml file and add the server. As the extension suggests this file is in YAML format:
    
    handlebars-example: # Server hostname (required)
      server: 192.168.1.2 # Server IP address (required)
      mirror: http://mirror.internode.on.net/pub/ubuntu/ubuntu/ # Alternate mirror for Ubuntu packages (optional)
      roles: # One or more roles that the server will perform
        - location/demo
        - demo/db
        - demo/wordpress

Now create the recipes, roles and location directories:

    mkdir -p recipes/roles/{demo,location}
